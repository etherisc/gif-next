// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

import "./InitializableCustom.sol";

/**
 * @dev This is copy of OpenZeppelin's Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)
 * Changes:
 * 1. name is InitializableCustom
 * 2. initializer() is virtual
 */
contract InitializableWithOwner is InitializableCustom {
    /**
     * @dev Storage of the initializable with owner contract.
     *
     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions
     * when using with upgradeable contracts.
     *
     * @custom:storage-location erc7201:etherisc.storage.InitializableWithOwner
     */
    struct InitializableWithOwnerStorage {
        /**
         * @dev Indicates address that can call function with initializer() modifier.
         */
        address _initializeOwner;
    }

    // keccak256(abi.encode(uint256(keccak256("etherisc.storage.InitializableWithOwner")) - 1)) & ~bytes32(uint256(0xff))
    bytes32 private constant INITIALIZABLE_WITH_OWNER_STORAGE = 0x68c33804b6903a5209b1d9c22d9e0d076c01f5d2b1e04bdb8679827258e0ad00;

    /**
     * @dev The contract initialization function caller is not authorized.
     */
    error InvalidInitializationCaller();

    /**
     * @dev Reinitialization is not supported.
     */
    error ReinitializationNotSupported();

    modifier initializer() virtual {
        // solhint-disable-next-line var-name-mixedcase
        InitializableWithOwnerStorage storage $ = _getInitializableWithOwnerStorage();
        if($._initializeOwner != msg.sender) {
            revert InvalidInitializationCaller();
        }
        initializer();
    }

    /**
     * @dev Reinitialization is not supported
     */
    modifier reinitializer(uint64 version) virtual {
        revert ReinitializationNotSupported();
    }

    constructor() {
        // solhint-disable-previous-line var-name-mixedcase
        InitializableWithOwnerStorage storage $ = _getInitializableWithOwnerStorage();
        $._initializeOwner = msg.sender;
    }

    /**
     * @dev Returns a pointer to the storage namespace.
     */
    // solhint-disable-next-line var-name-mixedcase
    function _getInitializableWithOwnerStorage() private pure returns (InitializableWithOwnerStorage storage $) {
        assembly {
            $.slot := INITIALIZABLE_WITH_OWNER_STORAGE
        }
    }
}
